; vim:set filetype=scheme foldmethod=marker:

; === 関数定義 === {{{
; 基本的な関数{{{
; 関数 cxxr
(define cadr (lambda (x) (car (cdr x))))
(define cdar (lambda (x) (cdr (car x))))
(define caar (lambda (x) (car (car x))))
(define cddr (lambda (x) (cdr (cdr x))))


(define-macro cond
  (lambda args
    (if (null? args)
        '*undef*
      (if (eq? (caar args) 'else)
          `(begin ,@(cdar args))
        (if (null? (cdar args))
            `(let ((+value+ ,(caar args)))
              (if +value+ +value+ (cond ,@(cdr args))))
          `(if ,(caar args)
               (begin ,@(cdar args))
            (cond ,@(cdr args))))))))

(define (assq x y)
  (cond ((null? y) nil)
		((eq? x (caar y)) (car y))
		(#t (assoc x (cdr y))) ))

(define (assoc x y)
  (cond ((null? y) nil)
		((equal? x (caar y)) (car y))
		(#t (assoc x (cdr y))) ))

(define (filter predicate ls)
  (cond ((null? ls) nil)
		((predicate (car ls))
		 (cons (car ls) (filter predicate (cdr ls))))
		(else
		  (filter predicate (cdr ls)))))
;}}}

; python binding macro {{{
(define-macro $call/mod
	(lambda args
	  `(py-call-with-module (quote ,(car args)) (quote ,(cadr args)) ,@(cddr args))))

(define-macro $class
	(lambda args
	  `(py-class (quote ,(car args)) (quote ,(cadr args)))))

(define-macro $call
	(lambda args
	  `(py-call (quote ,(car args)) ,@(cdr args))))

(define-macro $attr
	(lambda args
	  `(py-attr (quote ,(car args)) ,@(cdr args))))

(define-macro $mcall
	(lambda args
	  `(py-method-call (quote ,(car args)) ,@(cdr args))))

(define-macro $import
	(lambda args
	  `(py-import (quote ,(car args)) ,@(cdr args))))
;}}}

(define (filer-current-tab)
  ($mcall currentTab filer-model))
(define (filer-current-pain)
  ($attr current (filer-current-tab)))

; platform {{{
($import platform)
(define (platform? str)
  (equal? ($call/mod platform system) str))
(define (windows?) (platform? "Windows"))
(define (mac?) (platform? "Darwin"))
; }}}

; file select {{{
(define (select-all)
  ($mcall toggle_isselect_all (filer-current-pain)))
(define (select-up)
  ($mcall toggle_isselet_up (filer-current-pain)))
(define (select-down)
  ($mcall toggle_isselet_down (filer-current-pain)))
;}}}

; tab {{{
(define (tabnew)
  ($mcall tabnew filer-model))
(define (tabclose)
  ($mcall removeTab filer-model ($attr currentIndex filer-model)))
(define (tabnext)
  ($mcall nextTab filer-model))
(define (tabprev)
  ($mcall prevTab filer-model))
(define (tabchange n)
  ($mcall changeTab filer-model n))
(define (tabfirst)
  (tabchange  0))
(define (tablast)
  (tabchange  (- ($call len ($attr tabs filer-model)) 1)))
; }}}

(define (reload-config)
  ($mcall load_config filer-view))
(define (reload-command)
  ($mcall reload_commands filer-model))
(define (reload-pain)
  ($mcall reload (filer-current-pain)))

; cursor {{{
(define (cursor-first)
  ($mcall cursor_first (filer-current-pain)))
(define (cursor-last)
  ($mcall cursor_last (filer-current-pain)))
(define (cursor-up)
  ($mcall cursor_up (filer-current-pain)))
(define (cursor-down)
  ($mcall cursor_down (filer-current-pain)))
;}}}

(define (change-pain)
  ($mcall change_focus (filer-current-pain)))
(define (cd-or-exec)
  ($mcall chdir_or_execute (filer-current-pain)))
(define (open-assoc)
  ($mcall open_assoc (filer-current-pain)))
(define (cd-parent)
  ($mcall chdir_parent (filer-current-pain)))
(define (popd)
  ($mcall popd (filer-current-pain)))
(define (pwd)
  ($mcall cwd (filer-current-pain)))

; view api {{{
(define (set-window-size width height)
  ($mcall set_window_size filer-view width height))

(define (set-window-maximized)
  ($mcall set_window_maximized filer-view))

(define set-default-font
  (lambda args
	  (apply ($attr set_defaultfont filer-view) args)))

(define (set-window-title title)
  ($mcall set_window_title filer-view title))
; }}}

; }}}


; === 設定 === {{{
(cond
  ((windows?) (set-default-font "tahoma" 10))
  ((mac?) (set-default-font "Monaco")))

(set-window-size 1100 600)
(set-window-title "pyfiler")

; define-key {{{
(define-key normal-map "d" 'tabclose)
(define-key normal-map "g" 'cursor-first)
(define-key normal-map "h" 'cd-parent)
(define-key normal-map "j" 'cursor-down)
(define-key normal-map "k" 'cursor-up)
(define-key normal-map "l" 'cd-or-exec)
(define-key normal-map "C-l" 'tabnext)
(define-key normal-map "C-h" 'tabprev)
(define-key normal-map "r" 'reload-pain)
(define-key normal-map "t" 'tabnew)

(define-key normal-map "a" 'select-all)
(define-key normal-map "S-g" 'cursor-last)
(define-key normal-map "S-r" 'reload-config)
(define-key normal-map "S-Space" 'select-up)
(define-key normal-map "Space" 'select-down)
(define-key normal-map "Tab" 'change-pain)
(define-key normal-map "S-Return" 'open-assoc)
(define-key normal-map "S-h" 'popd)
;}}}
;}}}
